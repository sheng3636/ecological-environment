// 存储localStorage
const setStore = (name, content) => {
  if (!name) return
  if (typeof content !== 'string') {
    content = JSON.stringify(content)
  }
  window.localStorage.setItem(name, content)
}
// 获取localStorage
const getStore = name => {
  if (!name) return
  return window.localStorage.getItem(name)
}
// 删除localStorage
export const removeStore = name => {
  if (!name) return
  window.localStorage.removeItem(name)
}
// 通过getDataURL()获取图片的base64编码字符；字符解码， 并转换成Blob对象；
const base64ToBlob = code => {
  let parts = code.split(';base64,')
  let contentType = parts[0].split(':')[1]
  let raw = window.atob(parts[1]);
  let rawLength = raw.length;

  let uInt8Array = new Uint8Array(rawLength)

  for (let i = 0; i < rawLength; ++i) {
    uInt8Array[i] = raw.charCodeAt(i)
  }
  return new Blob([uInt8Array], {
    type: contentType
  })
}
// 通过getDataURL将echarts图表导出为图片
const saveAsImage = (chart) => {
  let content = chart.getDataURL()
  let aLink = document.createElement('a')
  let blob = base64ToBlob(content)
  let evt = document.createEvent("HTMLEvents")
  evt.initEvent("click", true, true)
  aLink.download = "mapChart.png"
  aLink.href = URL.createObjectURL(blob)
  aLink.dispatchEvent(new MouseEvent('click', {
    bubbles: true,
    cancelable: true,
    view: window
  }))
}

export const getJenksBreaks = function (lineListFilter, numclass) {
  if (lineListFilter.length < numclass) {
    numclass = lineListFilter.length
  } else {
    numclass = numclass
  }
  let data = lineListFilter.map(li => {
    return li.num;
  })
  //在javascript里，Array的sort方法，必须用这个函数，否则不是按数字大小排序
  function sortNumber(a, b) {
    return a - b;
  }

  // int numclass;
  var numdata = data.length;
  data.sort(sortNumber); //先排序
  var mat1 = new Array();
  var mat2 = new Array();
  var st = new Array();
  var j = 0,
    i = 0;
  for (j = 0; j <= numdata; j++) {
    mat1[j] = new Array();
    mat2[j] = new Array();
    st[j] = 0;
    for (i = 0; i <= numclass; i++) {
      mat1[j][i] = 0;
      mat2[j][i] = 0;
    }
  }
  for (i = 1; i <= numclass; i++) {
    mat1[1][i] = 1;
    mat2[1][i] = 0;
    for (j = 2; j <= numdata; j++) {
      mat2[j][i] = Number.MAX_VALUE;
    }
  }
  var v = 0;
  for (var l = 2; l <= numdata; l++) {
    var s1 = 0;
    var s2 = 0;
    var w = 0;
    var i3 = 0;
    for (var m = 1; m <= l; m++) {
      i3 = l - m + 1;
      var val = parseInt(data[i3 - 1]);
      s2 += val * val;
      s1 += val;
      w++;
      v = s2 - (s1 * s1) / w;
      var i4 = i3 - 1;
      if (i4 != 0) {
        for (j = 2; j <= numclass; j++) {
          if (mat2[l][j] >= (v + mat2[i4][j - 1])) {
            mat1[l][j] = i3;
            mat2[l][j] = v + mat2[i4][j - 1];
          }
        }
      }
    }
    mat1[l][1] = 1;
    mat2[l][1] = v;
  }
  var k = numdata;
  var kclass = new Array();
  kclass[numclass - 1] = parseInt(data[data.length - 1]);
  for (j = numclass; j >= 2; j--) {
    var id = parseInt(mat1[k][j]) - 2;
    kclass[j - 2] = parseInt(data[id]);
    k = parseInt(mat1[k][j] - 1);
  }
  return kclass;
};

//获取最小值下标
const getMinIndex = arr => {
  var min = arr[0];
  var index = 0;
  for (var i = 0; i < arr.length; i++) {
    if (parseFloat(min) > parseFloat(arr[i])) {
      min = arr[i];
      index = i;
    }
  }
  return index;
}

const getMaxIndex = data => {
  let max = data[0];
  let index = 0;
  data.forEach((d, i) => {
    if (parseFloat(d) >= parseFloat(max)) {
      max = d;
      index = i;
    }
  });
  return index;
}

const getDiff = (arr1, arr2) => {
  let sum1 = arr1.reduce((tol, cur) => {
    return parseFloat(tol) + parseFloat(cur);
  });
  let sum2 = arr2.reduce((tol, cur) => {
    return parseFloat(tol) + parseFloat(cur);
  });

  if (sum1 - sum2 >= 0) {
    return "大于";
  } else {
    return "小于";
  }
}

const compareData = (arr) => {
  let len = arr.length;
  let num1 = arr[0];
  let num2 = arr[len - 1];
  if (num1 > num2) {
    return "减少";
  } else {
    return "增加"
  }
}

const getNumIndex = (num, arr) => {
  num = parseFloat(num);
  let index = 0
  arr.forEach((a, i) => {
    if (num < a) {
      index = i + 1
    }
  })
  return index
}

const getMinDataIndex = (arr) => {
  let index = -1
  for (let i = 0; i < arr.length; i++) {
    if (arr[i]) {
      index = i
      break
    }
  }
  return index
}

const zheJiangAreaCode = {
  "舟山市": "330900",
  "嵊泗县": "330922",
  "岱山县": "330921",
  "定海区": "330902",
  "普陀区": "330903",
  "嘉兴市": "330400",
  "平湖市": "330482",
  "秀洲区": "330411",
  "南湖区": "330402",
  "嘉善县": "330421",
  "海盐县": "330424",
  "桐乡市": "330483",
  "海宁市": "330481",
  "宁波市": "330200",
  "北仑区": "330206",
  "象山县": "330225",
  "镇海区": "330211",
  "江北区": "330205",
  "宁海县": "330226",
  "奉化区": "330213",
  "海曙区": "330203",
  "鄞州区": "330212",
  "余姚市": "330281",
  "慈溪市": "330282",
  "台州市": "331000",
  "临海市": "331082",
  "椒江区": "331002",
  "路桥区": "331004",
  "玉环市": "331083",
  "温岭市": "331081",
  "三门县": "331022",
  "天台县": "331023",
  "黄岩区": "331003",
  "仙居县": "331024",
  "温州市": "330300",
  "洞头区": "330305",
  "苍南县": "330327",
  "平阳县": "330326",
  "瑞安市": "330381",
  "龙港市": "330383",
  "泰顺县": "330329",
  "文成县": "330328",
  "永嘉县": "330324",
  "乐清市": "330382",
  "鹿城区": "330302",
  "瓯海区": "330304",
  "龙湾区": "330303",
  "丽水市": "331100",
  "缙云县": "331122",
  "松阳县": "331124",
  "遂昌县": "331123",
  "莲都区": "331102",
  "龙泉市": "331181",
  "景宁畲族自治县": "331127",
  "云和县": "331125",
  "青田县": "331121",
  "庆元县": "331126",
  "绍兴市": "330600",
  "嵊州市": "330683",
  "上虞区": "330604",
  "越城区": "330602",
  "柯桥区": "330603",
  "诸暨市": "330681",
  "新昌县": "330624",
  "湖州市": "330500",
  "德清县": "330521",
  "安吉县": "330523",
  "长兴县": "330522",
  "吴兴区": "330502",
  "南浔区": "330503",
  "衢州市": "330800",
  "开化县": "330824",
  "衢江区": "330803",
  "常山县": "330822",
  "柯城区": "330802",
  "江山市": "330881",
  "龙游县": "330825",
  "金华市": "330700",
  "浦江县": "330726",
  "永康市": "330784",
  "东阳市": "330783",
  "兰溪市": "330781",
  "磐安县": "330727",
  "武义县": "330723",
  "金东区": "330703",
  "义乌市": "330782",
  "婺城区": "330702",
  "杭州市": "330100",
  "西湖区": "330106",
  "上城区": "330102",
  "富阳区": "330111",
  "桐庐县": "330122",
  "建德市": "330182",
  "余杭区": "330110",
  "淳安县": "330127",
  "临安区": "330112",
  "滨江区": "330108",
  "萧山区": "330109",
  "拱墅区": "330105",
  "江干区": "330104",
  "下城区": "330103"
}

export default {
  setStore,
  getStore,
  removeStore,
  base64ToBlob,
  saveAsImage,
  getMinIndex,
  getMaxIndex,
  getDiff,
  compareData,
  getNumIndex,
  getMinDataIndex
}