import zhejiang from '../../../public/js/jsonData/zhejiangcity.json'
import hangzhou from '../../../public/js/jsonData/hangzhou.json'
import huzhou from '../../../public/js/jsonData/huzhou.json'
import jiaxing from '../../../public/js/jsonData/jiaxing.json'
import jinhua from '../../../public/js/jsonData/jinhua.json'
import lishui from '../../../public/js/jsonData/lishui.json'
import ningbo from '../../../public/js/jsonData/ningbo.json'
import quzhou from '../../../public/js/jsonData/quzhou.json'
import shaoxing from '../../../public/js/jsonData/shaoxing.json'
import taizhou from '../../../public/js/jsonData/taizhou.json'
import wenzhou from '../../../public/js/jsonData/wenzhou.json'
import zhoushan from '../../../public/js/jsonData/zhoushan.json'
import changsanjiao from '../../../public/js/jsonData/changsanjiao'
import csjPnt from '../../../public/js/jsonData/csj_pnt.json'
import {
  getJenksBreaks
} from '@/utils/mUtils.js'
import axios from 'axios'
export const contactMixin = {
  data() {
    return {
      maps: {
        people5Map1: {
          chart: null,
          url: "/statistics/getFlowDirectionData",
          params: {
            year: 2018,
            area: '台州市',
            week: 1,
            type: 1
          },
          result: {},
          interval: null,
          curCity: '台州市',
          no: "no18"
        },
        people5Map2: {
          chart: null,
          url: "/statistics/getFlowDirectionData",
          params: {
            year: 2018,
            area: '台州市',
            week: 2,
            type: 1
          },
          result: {},
          interval: null,
          curCity: '台州市',
          no: "no19"
        },
        people5Map3: {
          chart: null,
          url: "/statistics/getFlowDirectionData2",
          params: {
            year: 2018,
            area: '仙居县',
            week: 1,
            type: 2,
            way: "流入"
          },
          result: {},
          interval: null,
          curCity: "浙江省",
          no: "no20"
        },
        people5Map4: {
          chart: null,
          url: "/statistics/getFlowDirectionData2",
          params: {
            year: 2018,
            area: '仙居县',
            week: 2,
            type: 2,
            way: "流入"
          },
          result: {},
          interval: null,
          curCity: "浙江省",
          no: "no21"
        },
        people5Map7: {
          chart: null,
          url: "/statistics/getFlowDirectionData2",
          params: {
            year: 2018,
            area: '仙居县',
            week: 1,
            type: 2,
            way: "流出"
          },
          result: {},
          interval: null,
          curCity: "浙江省",
          no: "no22"
        },
        people5Map8: {
          chart: null,
          url: "/statistics/getFlowDirectionData2",
          params: {
            year: 2018,
            area: '仙居县',
            week: 2,
            type: 2,
            way: "流出"
          },
          result: {},
          interval: null,
          curCity: "浙江省",
          no: "no23"
        },
        people5Map5: {
          chart: null,
          url: "/statistics/getFlowDirectionData2",
          params: {
            year: 2018,
            area: '仙居县',
            week: 1,
            type: 3
          },
          result: {},
          interval: null,
          curCity: "长三角",
          no: "no24"
        },
        people5Map6: {
          chart: null,
          url: "/statistics/getFlowDirectionData2",
          params: {
            year: 2018,
            area: '仙居县',
            week: 2,
            type: 3
          },
          result: {},
          interval: null,
          curCity: "长三角",
          no: "no25"
        }
      },
      mapConfig: {
        浙江省: zhejiang,
        杭州市: hangzhou,
        湖州市: huzhou,
        嘉兴市: jiaxing,
        金华市: jinhua,
        丽水市: lishui,
        宁波市: ningbo,
        衢州市: quzhou,
        绍兴市: shaoxing,
        台州市: taizhou,
        温州市: wenzhou,
        舟山市: zhoushan,
        长三角: changsanjiao,
        长三角中心点: csjPnt
      },
      paramsBasic: {
        cityName1: null,
        cityName2: null,
        cityName3: null,
        cityName4: null,
        cityName5: null,
        cityName6: null,
        cityName7: null,
        peopleNum1: "peopleNum1",
        peopleNum2: "peopleNum2",
        peopleNum3: "peopleNum3",
        peopleNum4: "peopleNum4",
        peopleNum5: "peopleNum5",
        peopleNum6: "peopleNum6",
        peopleNum7: "peopleNum7",
        peopleNum8: "peopleNum8",
        peopleNum9: "",
        compare1: "compare1",
        compare2: "compare2",
        rank1: "rank1",
        parcent1: "parcent1",
        parcent2: "parcent2"
      },
      cityLineData: [],
      cityLineData1: [],
      cityList: [
        "杭州市",
        "湖州市",
        "嘉兴市",
        "金华市",
        "丽水市",
        "宁波市",
        "衢州市",
        "绍兴市",
        "台州市",
        "温州市",
        "舟山市"
      ],
    }
  },
  watch: {
    cityLineData: function (newData) {
      if (newData.length < 2) {
        return;
      }
      this.tableData = [];
      let cData = newData[0];
      let cData1 = newData[1];
      let freqSum1 = this.getDirtSum(cData.data[1]);
      let tripSum1 = this.getDirtSum(cData.data[0]);
      let freqSum2 = this.getDirtSum(cData1.data[1]);
      let tripSum2 = this.getDirtSum(cData1.data[0]);
      this.cityList.forEach(c => {
        if (c === this.parCity) {
          return;
        }
        let dirt = {};
        if (cData.week == 1) {
          dirt["city"] = c;
          dirt["freq1"] =
            Math.floor((cData.data[1][c] / freqSum1) * 10000) / 100;
          dirt["trip1"] =
            Math.floor((cData.data[0][c] / tripSum1) * 10000) / 100;
          //cData.data[0][c];
          dirt["freq2"] =
            Math.floor((cData1.data[1][c] / freqSum2) * 10000) / 100;
          // cData1.data[1][c];
          dirt["trip2"] =
            Math.floor((cData1.data[0][c] / tripSum2) * 10000) / 100;
          // cData1.data[0][c];
        } else {
          dirt["city"] = c;
          dirt["freq1"] =
            Math.floor((cData1.data[1][c] / freqSum1) * 10000) / 100;
          dirt["trip1"] =
            Math.floor((cData1.data[0][c] / tripSum1) * 10000) / 100;
          //cData.data[0][c];
          dirt["freq2"] =
            Math.floor((cData.data[1][c] / freqSum2) * 10000) / 100;
          // cData1.data[1][c];
          dirt["trip2"] =
            Math.floor((cData.data[0][c] / tripSum2) * 10000) / 100;
          // dirt["freq1"] = cData1.data[1][c];
          // dirt["trip1"] = cData1.data[0][c];
          // dirt["freq2"] = cData.data[1][c];
          // dirt["trip2"] = cData.data[0][c];
        }
        this.tableData.push(dirt);
      });
      // cityLineData 城市分析 newData.data 0 出行人数, 1 出行频次
    },
  },
  mounted() {
    this.chartArr.sideItem5_0.title = `2018年手机信令${this.countyName}黄金周人口联系`
    this.chartArr.sideItem5_1.title = `2018年手机信令${this.countyName}普通周人口联系`
    this.chartArr.sideItem5_3.title = `2018年手机信令${this.countyName}与全省各区域间黄金周人口联系（流入）`
    this.chartArr.sideItem5_4.title = `2018年移动电话信令${this.countyName}与全省各区域间普通周人口联系（流入）`
    this.chartArr.sideItem5_6.title = `2018年移动手机信令${this.countyName}与全省各区域间黄金周人口联系（流出）`
    this.chartArr.sideItem5_7.title = `2018年移动手机信令${this.countyName}与全省各区域间普通周人口联系（流出）`
    this.chartArr.sideItem5_9.title = `2018年手机信令${this.countyName}与长三角黄金周人口联系`
    this.chartArr.sideItem5_10.title = `2018年手机信令${this.countyName}与长三角普通周人口联系`

    // 2、 某年基于手机信令数据的仙居县人口联系市内联系表格
    axios({
      url: 'http://118.190.204.249:8899/xboot/statistics/getFlowTable',
      method: 'get',
      params: {
        year: 2018,
        area: this.cityName,
        type: 1,
        sign: '地市'
      }
    }).then(res => {
      let data = res.data.result
      data.sort((a, b) => {
        return b.frequency1 - a.frequency1;
      });
      this.chartArr.sideItem5_2.title = `2018年基于手机信令数据的${this.countyName}人口联系市内联系表格`
      this.chartArr.sideItem5_2.list = data
    })
    // 5、 2018年基于手机信令数据的各地市与仙居县人口联系汇总占比表(%)
    axios({
      url: 'http://118.190.204.249:8899/xboot/statistics/getFlowTable',
      method: 'get',
      params: {
        year: 2018,
        area: this.countyName,
        type: 2,
        sign: '区县',
        way: '流入'
      }
    }).then(res => {
      let data = res.data.result
      data.sort((a, b) => {
        return b.frequency1 - a.frequency1;
      })
      this.chartArr.sideItem5_5.title = `2018年基于手机信令数据的各地市与${this.countyName}人口联系汇总占比表(%)`
      this.chartArr.sideItem5_5.list = data
    })
    // 8、 2018年基于手机信令数据的各地市与仙居县人口联系汇总占比表(%)
    axios({
      url: 'http://118.190.204.249:8899/xboot/statistics/getFlowTable',
      method: 'get',
      params: {
        year: 2018,
        area: this.cityName,
        type: 3,
        sign: '地市'
      }
    }).then(res => {
      let data = res.data.result
      this.chartArr.sideItem5_8.title = `2018年基于手机信令数据的各地市与${this.countyName}人口联系汇总占比表(%)`
      this.chartArr.sideItem5_8.list = data
    })
    // 9、 某年基于联通手机信令数据的长三角各地区（除浙江省外TOP5）与台州市人口联系汇总占比表（％）
    axios({
      url: 'http://118.190.204.249:8899/xboot/statistics/getFlowTable',
      method: 'get',
      params: {
        year: 2018,
        area: this.countyName,
        type: 3,
        sign: '区县'
      }
    }).then(res => {
      let data = res.data.result
      this.chartArr.sideItem5_11.title = `2018年基于联通手机信令数据的长三角各省与仙居县人口联系汇总占比表（%）`
      data.sort((a, b) => {
        return b.frequency1 - a.frequency1;
      })
      this.chartArr.sideItem5_11.list = data.slice(0, 5)
    })
    // 9、 某年基于联通手机信令数据的长三角各地区（除浙江省外TOP5）与台州市人口联系汇总占比表（％）
    axios({
      url: 'http://118.190.204.249:8899/xboot/statistics/getFlowTable',
      method: 'get',
      params: {
        year: 2018,
        area: this.countyName,
        type: 4,
        sign: '区县'
      }
    }).then(res => {
      let data = res.data.result
      this.chartArr.sideItem5_12.title = `2018年基于联通手机信令数据的长三角各地区（除浙江省外TOP5）与仙居县人口联系汇总占比表（%）`
      data.sort((a, b) => {
        return b.frequency1 - a.frequency1;
      })
      this.chartArr.sideItem5_12.list = data.slice(0, 5)
    })
    for (let key in this.maps) {
      this.lineintervalMap(key)
    }
  },
  methods: {
    lineintervalMap(key) {
      let params = JSON.parse(JSON.stringify(this.maps[key].params))
      let url = this.maps[key].url
      axios({
        url: 'http://118.190.204.249:8899/xboot' + url,
        method: 'get',
        params: params
      }).then(res => {
        let result = res.data.result

        let promise = new Promise((resolve, reject) => {
          this.maps[key].chart = this.$echarts.init(document.getElementById(key));
          this.maps[key].chart.on("finished", params => {
            resolve();
          })
          if (this.maps[key].curCity === "浙江省") {
            let option = this.createOption(
              result,
              this.maps[key].curCity,
              params
            );
            this.maps[key].chart.setOption(option);
          } else if (this.maps[key].curCity === "长三角") {
            let option = this.createOption(
              result,
              this.maps[key].curCity,
              params
            );
            this.maps[key].chart.setOption(option);
          } else {
            let option = this.createOption(
              result,
              this.maps[key].curCity,
              params
            );
            this.maps[key].chart.setOption(option);
          }
        });
      })
    },
    createOption(data, city, params) {
      let nameList = [];
      let centerList = {};
      let self = this;
      this.$echarts.registerMap(city, self.mapConfig[city]);
      let geojson = self.mapConfig[city];
      let list = [];
      // 区<->区的数据
      let listDirt = {};
      // 市<->市的数据
      let listDirt2 = {};

      let listDirt3 = {};
      for (let key in geojson) {
        list = geojson[key];
      }
      list.forEach(l => {
        nameList.push({
          name: l.properties.name,
          value: l.properties.center,
          symbolSize: 0
        });
        centerList[l.properties.name] = l.properties.center.slice(0, 2);
        listDirt[l.properties.name] = 0;
      });
      let lineList = [];
      data.forEach(d => {
        let name = d.LEAVE_NAME;
        let name1 = d.ARRIVE_NAME;
        listDirt[name] += parseFloat(d.TRIP_NUMBER);
        listDirt[name1] += parseFloat(d.TRIP_NUMBER);
        if (centerList[name] != null && centerList[name1] != null) {
          lineList.push({
            fromName: name,
            toName: name1,
            coords: [centerList[name], centerList[name1]],
            num: d.TRIP_NUMBER,
            value: d.TRIP_NUMBER
          });

          if (listDirt2.hasOwnProperty(d.ARRIVE_CITY)) {
            listDirt2[d.ARRIVE_CITY] += parseFloat(d.TRIP_NUMBER);
            listDirt3[d.ARRIVE_CITY] += parseFloat(d.TRIP_FREQUENCY);
          } else {
            listDirt2[d.ARRIVE_CITY] = parseFloat(d.TRIP_NUMBER);
            listDirt3[d.ARRIVE_CITY] = parseFloat(d.TRIP_FREQUENCY);
          }
          if (listDirt2.hasOwnProperty(d.LEAVE_CITY)) {
            listDirt2[d.LEAVE_CITY] += parseFloat(d.TRIP_NUMBER);
            listDirt3[d.LEAVE_CITY] += parseFloat(d.TRIP_FREQUENCY);
          } else {
            listDirt2[d.LEAVE_CITY] = parseFloat(d.TRIP_NUMBER);
            listDirt3[d.LEAVE_CITY] = parseFloat(d.TRIP_FREQUENCY);
          }
        }
      });

      lineList.sort((a, b) => {
        return a.num - b.num;
      });
      let lineListFilter = lineList.filter(li => {
        return li.num !== 0;
      });
      // if(lineList.length ){

      // }
      let lineMin = lineListFilter[0].num;
      let lineMax = lineListFilter[lineListFilter.length - 1].num;
      // let linePeaces = this.classifyNumber(lineListFilter, 5)
      // 分级别区间范围
      let linePeace = getJenksBreaks(lineListFilter, 5);
      linePeace = linePeace.map(m => {
        let val = 0;
        if (city == "长三角") {
          val = Math.ceil(m / 100) * 100;
        } else {
          val = Math.ceil(m / 1000) * 1000;
        }
        return val;
      });
      // 区间值
      let linePeaces = this.classifyNumber(linePeace);
      let scattList = nameList.map(li => {
        let num = listDirt[li.name];
        li.value.push(num);
        li.num = num;
        if (num / 50000 > 15) {
          li.symbolSize = 15;
        } else {
          li.symbolSize = Math.ceil(num / 50000);
        }
        return li;
      });
      scattList.sort((a, b) => {
        return a.num - b.num;
      });
      let scattListFilter = scattList.filter(sca => {
        return sca.num !== 0;
      });
      let min = scattListFilter[0].num;
      let max = scattListFilter[scattListFilter.length - 1].num;
      let scattPeace = getJenksBreaks(scattListFilter, 5);
      scattPeace = scattPeace.map(m => {
        let val = 0;
        if (city == "长三角") {
          val = Math.ceil(m / 100) * 100;
        } else {
          val = Math.ceil(m / 1000) * 1000;
        }
        return val;
      });
      let scattPeaces = this.classifyNumber(scattPeace);
      // let scattPeaces = this.classifyNumber(scattListFilter, 5);
      // let max = scattList[0].num;
      // let min = scattList[scattList.length - 1].num;
      if (city == "浙江省") {
        this.cityLineData.push({
          week: params.week,
          data: [listDirt2, listDirt3]
        });
      } else if (city == "长三角") {
        // this.cityLineData.push({
        //   week: params.week,
        //   data: [listDirt2, listDirt3]
        // });
      } else {
        this.paramsBasic.cityName1 =
          scattListFilter[scattListFilter.length - 1].name;
        let lineParams = lineListFilter[lineListFilter.length - 1];
        this.paramsBasic.cityName2 = lineParams.fromName;
        this.paramsBasic.cityName3 = lineParams.toName;
      }

      let option = {
        grid: {
          top: 10,
          bottom: 0,
          right: 0,
          left: 0
        },
        tooltip: {
          trigger: "item",
          formatter: function (params) {
            if (params.componentSubType == "scatter") {
              return (
                params.data.name + ":\n" + params.data.num / 10000 + "万人次"
              );
            } else {
              return `${params.data.fromName} -> ${params.data.toName}为${params.data.value}人次`;
            }
          }
        },
        toolbox: {
          feature: {
            dataView: {
              show: true,
              readOnly: false
            },
            // magicType: { show: true, type: ["line", "bar"] },
            // restore: { show: true },
            saveAsImage: {
              show: true
            }
          }
        },
        itemStyle: {
          opacity: 1,
          borderWidth: 1,
          borderColor: "#fff"
        },
        geo: {
          map: city,
          label: {
            emphasis: {
              show: false
            }
          },
          roam: false,
          itemStyle: {
            normal: {
              areaColor: "#142233",
              borderWidth: 2,
              borderColor: "white"
            },
            emphasis: {
              // areaColor: '#2a333d'
            }
          }
        },
        visualMap: [{
            // type: "continuous",
            type: "piecewise",
            text: ["单位:人数（点）"],
            left: "right",
            // splitNumber: 5,
            // max: max,
            // min: min,
            calculable: true,
            inRange: {
              color: ["green", "yellow", "orange", "red"]
            },
            textStyle: {
              color: "#acf8fd"
            },
            showLabel: true,
            seriesIndex: 0,
            pieces: scattPeaces
          },
          {
            type: "piecewise",
            text: ["单位:次数（线）"],
            left: "left",
            // max: lineMax,
            // min: lineMin,
            pieces: linePeaces,
            calculable: true,
            inRange: {
              color: ["green", "yellow", "orange", "red"]
            },
            textStyle: {
              color: "#acf8fd"
            },
            showLabel: true,
            seriesIndex: 1
          }
        ],
        series: [{
            name: "地点",
            type: "scatter",
            coordinateSystem: "geo",
            zlevel: 2,
            rippleEffect: {
              brushType: "stroke"
            },
            symbolSize: (rawValue, params) => {
              let num = params.data.symbolSize;
              let index = Math.ceil(num / min);
              return 100;
            },
            label: {
              normal: {
                show: true,
                position: "right", //显示位置
                offset: [5, 0], //偏移设置
                formatter: function (params) {
                  //圆环显示文字
                  return params.data.name;
                },
                fontSize: 10
              },
              emphasis: {
                show: true
              }
            },
            // showEffectOn: "render",
            itemStyle: {
              normal: {
                color: params => {}
              }
            },
            data: scattListFilter
          },
          {
            name: "线路",
            type: "lines",
            coordinateSystem: "geo",
            zlevel: 2,
            large: true,
            // effect: {
            //   show: true,
            //   constantSpeed: 30,
            //   symbol: "pin",
            //   symbolSize: 0,
            //   trailLength: 0
            // },
            lineStyle: {
              normal: {
                width: 1.5,
                opacity: 0.6,
                curveness: 0.1
              }
            },
            data: lineListFilter
          }
        ]
      };
      return option;
    },
    getDirtSum(data) {
      let sum = 0;
      for (let key in data) {
        if (key === this.parCity) {
          continue;
        }
        sum += parseFloat(data[key]);
      }
      return sum;
    },
    getAllValue() {
      var objectArr = [];
      this.verdictArr.forEach(ver => {
        let object = {
          name: ver,
          value: this.$refs[ver].innerText
        };
        objectArr.push(object);
      });
      let obj1 = {
        name: "tab1",
        value: JSON.stringify(this.townData)
      }
      let obj2 = {
        name: "tab2",
        value: JSON.stringify(this.tableData1)
      }
      let obj3 = {
        name: "tab3",
        value: JSON.stringify(this.tableData2)
      }
      let obj4 = {
        name: "tab4",
        value: JSON.stringify(this.tableData3)
      }
      let obj5 = {
        name: "tab5",
        value: JSON.stringify(this.tableData4)
      }
      objectArr.push(obj1);
      objectArr.push(obj2);
      objectArr.push(obj3);
      objectArr.push(obj4);
      objectArr.push(obj5);
      return objectArr;
    },
    initChartSize() {
      for (let key in this.chartConfig) {
        this.chartConfig[key].chart.resize();
      }
    },
    classifyNumber(arr) {
      let list = [];
      for (let i = 0; i < arr.length; i++) {
        let temp = {};
        switch (i) {
          case 0:
            temp = {
              lte: arr[0]
              // label: `<=${arr[splitNumber].num}`
            };
            break;
            // case arr.length:
            //   temp = {
            //     gt: arr[arr.length-1],
            //   };
            //   break;
          default:
            temp = {
              gt: arr[i - 1],
              lte: arr[i]
              // label: `${arr[index1].num}~${arr[index2].num}`
            };
            break;
        }
        list.push(temp);
      }
      return list;
    },

    // 导出基于手机信令数据的台州市人口联系市内联系表格
    phone1Export() {
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = ['', '出行次数', '出行人数', '出行次数', '出行人数']
        const filterVal = ['area', 'frequency1', 'number1', 'frequency2', 'number2']
        const mHead = [
          ['县（市、区）', '黄金周', '', '普通周', '']
        ]
        const list = this.chartArr.sideItem5_2.list
        const data = this.formatJson(filterVal, list)

        excel.export_json_to_excel({
          header: tHeader,
          multiHeader: mHead,
          merges: ["A1:A2", "B1:C1", "D1:E1"],
          data,
          filename: `${this.chartArr.sideItem5_2.title}${this.returnDatetime()}`,
          autoWidth: true,
          bookType: 'xlsx'
        })
        this.downloadLoading = false
      })
    },
    phone2Export() {
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = ['', '出行次数', '出行人数', '出行次数', '出行人数']
        const filterVal = ['area', 'frequency1', 'number1', 'frequency2', 'number2']
        const mHead = [
          ['地市', '黄金周', '', '普通周', '']
        ]
        const list = this.chartArr.sideItem5_5.list
        const data = this.formatJson(filterVal, list)

        excel.export_json_to_excel({
          header: tHeader,
          multiHeader: mHead,
          merges: ["A1:A2", "B1:C1", "D1:E1"],
          data,
          filename: `${this.chartArr.sideItem5_5.title}${this.returnDatetime()}`,
          autoWidth: true,
          bookType: 'xlsx'
        })
        this.downloadLoading = false
      })
    },
    phone3Export() {
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = ['', '出行次数', '出行人数', '出行次数', '出行人数']
        const filterVal = ['area', 'frequency1', 'number1', 'frequency2', 'number2']
        const mHead = [
          ['省份', '黄金周', '', '普通周', '']
        ]
        const list = this.chartArr.sideItem5_8.list
        const data = this.formatJson(filterVal, list)

        excel.export_json_to_excel({
          header: tHeader,
          multiHeader: mHead,
          merges: ["A1:A2", "B1:C1", "D1:E1"],
          data,
          filename: `${this.chartArr.sideItem5_8.title}${this.returnDatetime()}`,
          autoWidth: true,
          bookType: 'xlsx'
        })
        this.downloadLoading = false
      })
    },
    phone4Export() {
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = ['', '出行次数', '出行人数', '出行次数', '出行人数']
        const filterVal = ['area', 'frequency1', 'number1', 'frequency2', 'number2']
        const mHead = [
          ['省份', '黄金周', '', '普通周', '']
        ]
        const list = this.chartArr.sideItem5_11.list
        const data = this.formatJson(filterVal, list)

        excel.export_json_to_excel({
          header: tHeader,
          multiHeader: mHead,
          merges: ["A1:A2", "B1:C1", "D1:E1"],
          data,
          filename: `${this.chartArr.sideItem5_11.title}${this.returnDatetime()}`,
          autoWidth: true,
          bookType: 'xlsx'
        })
        this.downloadLoading = false
      })
    },
    phone5Export() {
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = ['', '出行次数', '出行人数', '出行次数', '出行人数']
        const filterVal = ['area', 'frequency1', 'number1', 'frequency2', 'number2']
        const mHead = [
          ['省份', '黄金周', '', '普通周', '']
        ]
        const list = this.chartArr.sideItem5_12.list
        const data = this.formatJson(filterVal, list)

        excel.export_json_to_excel({
          header: tHeader,
          multiHeader: mHead,
          merges: ["A1:A2", "B1:C1", "D1:E1"],
          data,
          filename: `${this.chartArr.sideItem5_12.title}${this.returnDatetime()}`,
          autoWidth: true,
          bookType: 'xlsx'
        })
        this.downloadLoading = false
      })
    },
    formatJson(filterVal, jsonData) {
      return jsonData.map(v => filterVal.map(j => {
        return v[j]
      }))
    },
  }
}