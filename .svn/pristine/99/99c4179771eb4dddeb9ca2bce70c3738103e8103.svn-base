import axios from 'axios'
import {
  Message
} from 'element-ui'

// 创建一个axios实例
const service = axios.create({
  // baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url
  baseURL: process.env.NODE_ENV === 'production' ? 'http://47.103.102.173:8881/ecologicalMap/' : 'http://192.168.13.251:8083/', // url = base url + request url
  // baseURL: 'http://47.103.102.173:8881/ecologicalMap/', // url = base url + request url
  // baseURL: 'http://192.168.13.251:8083/', // url = base url + request url
  withCredentials: false, // 表示跨域请求时是否需要使用凭证，默认为false
  timeout: 10000 * 20 // 如果请求超过 `timeout` 的时间，请求将被中断
})

// 请求拦截器
service.interceptors.request.use(
  config => {
    return config
  },
  error => {
    // 请求错误做些什么
    console.log(error) // 为调试
    return Promise.reject(error)
  }
)

// 响应拦截器
service.interceptors.response.use(
  /**
   * 如果你想获得http标头或状态等信息
   * Please return  response => response
   */

  /**
   * 确定自定义代码的请求状态
   * 这只是一个例子
   * 你也可以判断状态通过HTTP状态代码
   */
  response => {
    const res = response.data

    // 如果自定义代码不是0,它是判断一个错误。
    if (res.code !== 0 && res.code !== '0') {
      Message({
        message: res.message || 'Error',
        type: 'error',
        duration: 5 * 1000
      })

      return Promise.reject(new Error(res.message || 'Error'))
    } else {
      return res
    }
  },
  error => {
    console.log('err' + error) // 为调试
    Message({
      message: error.message,
      type: 'error',
      duration: 5 * 1000
    })
    return Promise.reject(error)
  }
)

function sendAll(arr) { // 顺序和请求发送的顺序相同，使用 axios.spread 分割成多个单独的响应对象
  if (Object.prototype.toString.call(arr) === '[object Array]') {
    return axios.all(arr).then(axios.spread(function (...res) { // axios.all 是axios的静态方法，不是实例上的方法
      // 请求全部都执行完成
      return Promise.resolve(res)
    }))
  } else {
    const error = new Error('参数错误！')
    try {
      throw error
    } catch (e) {
      // console.log(e)
    }
  }
}

export default {
  service,
  sendAll
}